1) The Nautilus DevOps team is planning to deploy some micro services on Kubernetes platform. The team has already set up a Kubernetes cluster and now they want to set up some namespaces deployments etc. Based on the current requirements, the team has shared some details as below:


  Create a namespace named dev and deploy a POD within it. Name the pod dev-nginx-pod and use the nginx image with the latest tag. Ensure to specify the tag as nginx:latest.
  Note: The kubectl utility on jump_host is configured to operate with the Kubernetes cluster.

* Create the Namespace:
  kubectl create -n dev
* Deploy the Pod: You can create the pod directly with kubectl run or by using a YAML configuration file. Hereâ€™s how to do it with both methods:

  Method 1: Directly with kubectl run
  kubectl run dev-nginx-pod --image=nginx:latest -n dev

  Method 2: Using a YAML File Create a YAML file, dev-nginx-pod.yaml, with the following content:

apiVersion: v1
kind: Pod
metadata:
  name: dev-nginx-pod
  namespace: dev
spec:
  containers:
    - name: nginx
      image: nginx:latest


* kubectl apply -f dev-nginx-pod.yaml
* kubectl get namespaces
* kubectl get pods -n dev

2) The Nautilus DevOps team has noticed performance issues in some Kubernetes-hosted applications due to resource constraints. To address this, they plan 
   to set limits on resource utilization. Here are the details:


Create a pod named httpd-pod with a container named httpd-container. Use the httpd image with the latest tag (specify as httpd:latest). Set the following resource limits:

Requests: Memory: 15Mi, CPU: 100m

Limits: Memory: 20Mi, CPU: 100m

Ans:

Create file named httpd-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: httpd-pod
spec:
  containers:
    - name: httpd-container
      image: httpd:latest
      resources:
        requests:
          memory: "15Mi"
          cpu: "100m"
        limits:
          memory: "20Mi"
          cpu: "100m"


kubectl apply -f httpd-pod.yaml

