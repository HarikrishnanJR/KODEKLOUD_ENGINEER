1) The Nautilus DevOps team is planning to deploy some micro services on Kubernetes platform. The team has already set up a Kubernetes cluster and now they want to set up some namespaces deployments etc. Based on the current requirements, the team has shared some details as below:


  Create a namespace named dev and deploy a POD within it. Name the pod dev-nginx-pod and use the nginx image with the latest tag. Ensure to specify the tag as nginx:latest.
  Note: The kubectl utility on jump_host is configured to operate with the Kubernetes cluster.

* Create the Namespace:
  kubectl create -n dev
* Deploy the Pod: You can create the pod directly with kubectl run or by using a YAML configuration file. Here’s how to do it with both methods:

  Method 1: Directly with kubectl run
  kubectl run dev-nginx-pod --image=nginx:latest -n dev

  Method 2: Using a YAML File Create a YAML file, dev-nginx-pod.yaml, with the following content:

apiVersion: v1
kind: Pod
metadata:
  name: dev-nginx-pod
  namespace: dev
spec:
  containers:
    - name: nginx
      image: nginx:latest


* kubectl apply -f dev-nginx-pod.yaml
* kubectl get namespaces
* kubectl get pods -n dev

2) The Nautilus DevOps team has noticed performance issues in some Kubernetes-hosted applications due to resource constraints. To address this, they plan 
   to set limits on resource utilization. Here are the details:


Create a pod named httpd-pod with a container named httpd-container. Use the httpd image with the latest tag (specify as httpd:latest). Set the following resource limits:

Requests: Memory: 15Mi, CPU: 100m

Limits: Memory: 20Mi, CPU: 100m

Ans:

Create file named httpd-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: httpd-pod
spec:
  containers:
    - name: httpd-container
      image: httpd:latest
      resources:
        requests:
          memory: "15Mi"
          cpu: "100m"
        limits:
          memory: "20Mi"
          cpu: "100m"


kubectl apply -f httpd-pod.yaml

3) Rolling update

An application currently running on the Kubernetes cluster employs the nginx web server. The Nautilus application development team has introduced some recent changes that need deployment. They've crafted an image nginx:1.17 with the latest updates.


Execute a rolling update for this application, integrating the nginx:1.17 image. The deployment is named nginx-deployment.

Ensure all pods are operational post-update.


Ans: 


To perform a rolling update on the nginx-deployment deployment and update it with the new nginx:1.17 image, follow these steps in your Kubernetes environment:

Execute the Rolling Update: Use the following kubectl command to update the image for the nginx-deployment deployment:


* kubectl set image deployment/nginx-deployment nginx=nginx:1.17

This command tells Kubernetes to update the nginx container in the nginx-deployment deployment to use the nginx:1.17 image.

Verify the Update Status: Check the status of the deployment to monitor the rolling update and ensure all pods are updated successfully:

* kubectl rollout status deployment/nginx-deployment

This will output the progress of the rollout. Kubernetes will update the pods in a rolling fashion, so there’s minimal downtime.

Confirm the New Image is Running: Once the rollout is complete, you can confirm that the updated image is deployed by listing the pods and checking their details:

* kubectl get pods -l app=nginx-deployment
* kubectl describe deployment nginx-deployment

This ensures that the new nginx:1.17 image is in use and that all pods are running with the latest configuration.


4) Undo Rollout

Earlier today, the Nautilus DevOps team deployed a new release for an application. However, a customer has reported a bug related to this recent release. Consequently, the team aims to revert to the previous version.


There exists a deployment named nginx-deployment; initiate a rollback to the previous revision.

Ans: 
To roll back the nginx-deployment to the previous version, you can use the following command:
* kubectl rollout undo deployment/nginx-deployment
This command will revert the deployment to the most recent previous revision, effectively undoing the latest deployment change.

Check the Rollout Status:
* kubectl rollout status deployment/nginx-deployment

View Rollout History (Optional):
* kubectl rollout history deployment/nginx-deployment




5) Creating Replicaset

The Nautilus DevOps team is gearing up to deploy applications on a Kubernetes cluster for migration purposes. A team member has been tasked with creating a ReplicaSet outlined below:
Create a ReplicaSet using httpd image with latest tag (ensure to specify as httpd:latest) and name it httpd-replicaset.
Apply labels: app as httpd_app, type as front-end.
Name the container httpd-container. Ensure the replica count is 4.

Ans: 

YAML Configuration for httpd-replicaset

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: httpd-replicaset
  labels:
    app: httpd_app
    type: front-end
spec:
  replicas: 4
  selector:
    matchLabels:
      app: httpd_app
  template:
    metadata:
      labels:
        app: httpd_app
        type: front-end
    spec:
      containers:
      - name: httpd-container
        image: httpd:latest



Use the following command to apply the configuration:
* kubectl apply -f httpd-replicaset.yaml

Verify the ReplicaSet to ensure it has created the desired number of replicas:
* kubectl get replicasets
* kubectl get pods -l app=httpd_app


6) Cronjob

The Nautilus DevOps team is setting up recurring tasks on different schedules. Currently, they're developing scripts to be executed periodically. To kickstart the process, they're creating cron jobs in the Kubernetes cluster with placeholder commands. Follow the instructions below:
Create a cronjob named xfusion.
Set Its schedule to something like */2 * * * *. You can set any schedule for now.
Name the container cron-xfusion.
Utilize the httpd image with latest tag (specify as httpd:latest).
Execute the dummy command echo Welcome to xfusioncorp!.
Ensure the restart policy is OnFailure.



ANS: 

To create a cron job in Kubernetes with the specified details, you can use the following YAML configuration file.

apiVersion: batch/v1
kind: CronJob
metadata:
  name: xfusion
spec:
  schedule: "*/2 * * * *"  # Runs every 2 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cron-xfusion
            image: httpd:latest
            command: ["echo", "Welcome to xfusioncorp!"]
          restartPolicy: OnFailure


Explanation of Each Section

apiVersion: Specifies the API version for CronJobs, which is batch/v1.
kind: Declares this resource as a CronJob.
metadata: Contains metadata for the CronJob, including:
name: Set to xfusion.
spec:
schedule: Specifies the cron schedule in a cron format, */2 * * * *, which means the job will run every 2 minutes.
jobTemplate: Defines the template for jobs created by this cron job:
spec:
containers: Configures the containers within the job. Here, it specifies:
name: cron-xfusion
image: httpd:latest, to use the latest version of the httpd image.
command: Runs the command echo "Welcome to xfusioncorp!" as a placeholder task.
restartPolicy: Set to OnFailure to restart the job only if it fails.


Applying the Configuration
1) Save this YAML configuration to a file, e.g., xfusion-cronjob.yaml.
2) Use the following command to create the CronJob in your Kubernetes cluster:
* kubectl apply -f xfusion-cronjob.yaml
3) Verify the CronJob to ensure it’s scheduled correctly:
* kubectl get cronjob
4) Check the Job History (to see any jobs created by this CronJob):
* kubectl get jobs

This CronJob setup will run the specified command every 2 minutes using the httpd:latest image and restart the job on failure, as required.
